public with sharing class ProjectServiceJunctionTriggerHelper extends TriggerHelper {
    public override void processBeforeInsert() {
        preventSelectingOtherFundingOppServiceLocation();
    }

    public override void processBeforeUpdate() {
        preventSelectingOtherFundingOppServiceLocation();
    }

    private void preventSelectingOtherFundingOppServiceLocation(){
        List<Project_Service_Location_Junction__c> projectServiceList = new List<Project_Service_Location_Junction__c>();
        Set<Id> projectIds = new Set<Id>(); //To collect Project Ids.....
        for(Project_Service_Location_Junction__c projectJunction : (List<Project_Service_Location_Junction__c>)Trigger.new){
            projectIds.add(projectJunction.Project__c); //Adding Project Id to collection.....
            projectServiceList.add(projectJunction); //Adding Project Service Junction record to collection.....
        }

        Map<Id, Id> projectToFundingOppMap = new Map<Id, Id>(); //To collect the Project and Its Funding Opp into Map collection....
        Map<Id,Project__c> projectWithServiceJunctionMap = new Map<Id, Project__c>(); //To fetch the Project Service Junction records....
        //Fetching all the Project Service Junction records where Project and Funding Opp is available in amp Collection....
        projectWithServiceJunctionMap = new Map<Id, Project__c>( [SELECT Id , Funding_Opportunity_Name__c FROM Project__c WHERE Id IN :projectIds]);
        for(Project__c projectToProcess : projectWithServiceJunctionMap.values()){ //Iterating the Project Service Junction records.....
            projectToFundingOppMap.put(projectToProcess.Id, projectToProcess.Funding_Opportunity_Name__c); //Adding the Project and Its Funding Opp into Map collection....
        }
        //Fetching all the Funding Opp Service Junction records whose Funding Opp is are in Map collection....
        Map<Id, Funding_Opportunity__c> fOWithServiceJunctionMap = new Map<Id, Funding_Opportunity__c>( [SELECT Id , (SELECT Id , Service_Location__c FROM  Funding_Opp_Service_Location_Junctions__r) FROM Funding_Opportunity__c WHERE Id IN : projectToFundingOppMap.values()]);
        for(Project_Service_Location_Junction__c projectServiceUnderProcessing : projectServiceList){ //Iterating Project Service junction records.....
            Project__c project = projectWithServiceJunctionMap.get(projectServiceUnderProcessing.Project__c);
            //Fetching the Funding Opp record from Map collection ....
            Funding_Opportunity__c fundingOpp = fOWithServiceJunctionMap.get(projectToFundingOppMap.get(projectServiceUnderProcessing.Project__c));
            List<Id> serviceLocationIds = new List<Id>(); //To collect the Service Location Ids which are tied to it.....
            //Iterating the Junction record from Funding opp...
            for(FundingOppServiceLocationJunction__c junction :fundingOpp.Funding_Opp_Service_Location_Junctions__r){
                serviceLocationIds.add(junction.Service_Location__c); //Adding the Service Location Id to the collection....
            }
            if(!serviceLocationIds.contains(projectServiceUnderProcessing.Service_Location__c)){ //Condition to check if the Service Location is tied to Funding Opp.....
                projectServiceUnderProcessing.addError('Service Location Must be tied with the Funding Opportunity of the Project.'); //Displaying the error.....
            }
        }
    }
}